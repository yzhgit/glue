//
// Copyright Â© 2017 zhangyao. All rights reserved.
// SPDX-License-Identifier: MIT
//

#include "glue/crypto/sha512.h"

#include <catch2/catch.hpp>

namespace glue {
namespace test {

TEST_CASE("SHA512 Test") {
    char text1[] = {"abc"};
    char text2[] = {"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"};
    char text3[] = {"aaaaaaaaaa"};

    // clang-format off
    uint8_t hash1[SHA_512::DigestSize] = {
        0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73, 0x49, 0xae,
        0x20, 0x41, 0x31, 0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2, 0x0a, 0x9e,
        0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a, 0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1,
        0xa8, 0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd, 0x45, 0x4d, 0x44, 0x23,
        0x64, 0x3c, 0xe8, 0x0e, 0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f};
    uint8_t hash2[SHA_512::DigestSize] = {
        0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a, 0x0c, 0xed, 0x7b, 0xeb, 0x8e,
        0x08, 0xa4, 0x16, 0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2, 0x28, 0xa8, 0x27, 0x9b,
        0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35, 0x96, 0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07,
        0xf9, 0xaa, 0x1d, 0x3b, 0xea, 0x57, 0x78, 0x9c, 0xa0, 0x31, 0xad, 0x85, 0xc7,
        0xa7, 0x1d, 0xd7, 0x03, 0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45};
    // uint8_t hash3[SHA_512::DigestSize] = {0xcd, 0xc7, 0x6e, 0x5c, 0x99, 0x14, 0xfb, 0x92,
    //                                       0x81, 0xa1, 0xc7, 0xe2, 0x84, 0xd7, 0x3e, 0x67,
    //                                       0xf1, 0x80, 0x9a, 0x48, 0xa4, 0x97, 0x20, 0x0e,
    //                                       0x04, 0x6d, 0x39, 0xcc, 0xc7, 0x11, 0x2c, 0xd0};
    // clang-format on

    uint8_t buf[SHA_512::DigestSize];
    SHA_512 sha512;

    sha512.update((uint8_t*)text1, strlen(text1));
    sha512.final(buf);
    CHECK(!memcmp(hash1, buf, SHA_512::DigestSize));

    sha512.clear();
    sha512.update((uint8_t*)text2, strlen(text2));
    sha512.final(buf);
    CHECK(!memcmp(hash2, buf, SHA_512::DigestSize));

    // sha512.clear();
    // for (int idx = 0; idx < 100000; ++idx) sha512.update((uint8_t*) text3, strlen(text3));
    // sha512.final(buf);
    // CHECK(!memcmp(hash3, buf, SHA_512::DigestSize));
}

}  // namespace test
}  // namespace glue
